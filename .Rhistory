B <- matrix(c(0, 0, 1, 1) , 2,2 )
B
B %*% B
P %*% P
R <- matrix(c(0, 1, 1, 0), 2, 2)
R
A[,1]
R %*% A[,1]
2 * B - matrix(c(1,0,0,1)2,2)
2 * B - matrix(c(1,0,0,1),2,2)
R
R %*% R
R %*% R %*% R
xi <- 2/3; xj1 <- 2/3; xj2 <- 2/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 1/3; xj1 <- 1/3; xj2 <- 1/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 1/3+0.1; xj1 <- 1/3; xj2 <- 1/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 1/3-0,1; xj1 <- 1/3; xj2 <- 1/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 1/3-0.1; xj1 <- 1/3; xj2 <- 1/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 2/3 + 0.1; xj1 <- 2/3; xj2 <- 2/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 2/3 + 0.25; xj1 <- 2/3; xj2 <- 2/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
xi <- 2/3 -0.25; xj1 <- 2/3; xj2 <- 2/3; sqrt(xi + xj1 + xj2) - 0.5 * xi
install.packages(c("Amelia", "BB", "caret", "catdata", "knitr", "mvtnorm", "optimx", "ordinal", "party", "pbkrtest", "plotrix", "rgl", "rugarch", "sp", "TH.data"))
library(caret)
mydata <- data.frame(x1 = 1:100, x2 = 100:1, y = rep(c("yes","no"), c(50,50)))
train(y~., data=mydata, method = 'J48', trControl = trainControl(method = "cv"), tuneLength = 1)
install.packages("caret")
library(caret)
mydata <- data.frame(x1 = 1:100, x2 = 100:1, y = rep(c("yes","no"), c(50,50)))
train(y~., data=mydata, method = 'J48', trControl = trainControl(method = "cv"), tuneLength = 1)
names(mydata)[1] <- "for"
train(y~., data=mydata, method = 'J48', trControl = trainControl(method = "cv"), tuneLength = 1)
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
mydata <- data.frame(x1 = 1:100, x2 = 100:1, y = rep(c("yes","no"), c(50,50)))
train(y~., data=mydata, method = 'J48', trControl = trainControl(method = "cv"), tuneLength = 1)
names(mydata)[1] <- "for"
train(y~., data=mydata, method = 'J48', trControl = trainControl(method = "cv"), tuneLength = 1)
train(x=mydata[,1:2], y=mydata[,3], method = 'J48', trControl = trainControl(method = "cv"), tuneLength = 1)
J48(y~., data=mydata)
WOW(J48]
WOW(J48)
rep(c("class1", "class2"), c(20, 30))
sample(24)
sample(21)
sample(24)
sample(22)
sample(24)
sample(22)
sample(24)
sample(22)
sample(25)
sample(24)
sample(21)
sample(24)
sample(2@)
sample(22)
sample(24)
sample(25)
sample(24)
sample(25)
sample(2)
sample(24)
sample(22)
sample(24)
sample(22)
sample(24)
sample(25)
sample(24)
sample(22)
sample(24)
sample(22)
sample(24)
sample(22)
sample(24)
sample(22)
sample(24)
sample(21)
inputfile <- "C:/IA008/IA008_DOM-5-11-25.csv"
inputfile2 <- "C:/IA008/IA008_DOM-5-11-25-recalculated__novy_celkovy_pocet_bodu.csv"
outputfile <- "C:/IA008/IA008_DOM-5-11-25-corrected.csv"
data <- read.csv(inputfile, sep = ";", header = F)
data2 <- read.csv(inputfile2, sep = ";", header = F)
head(data2)
data_merge <- merge(data, data2[, c("V1", "V8")], by = "V1", all.x = T)
max_x2 <- sapply(as.character(data_merge$V8.y),
function(x) max(as.numeric(strsplit(x, "*", fixed = TRUE)[[1]]), na.rm = T))
names(max_x2) <- NULL
x <- sapply(data_merge[, 8], substring, first = 2)
x <- as.numeric(x)
x
new_x <- pmax(x, max_x2)
new_x
max_x2
View(data_merge)
View(data)
View(data2)
data$V8
which(data$V8 == "*")
data$V8[which(data$V8 == "*")] <- "*0"
levels(data$V8)
levels(data$V8) <- c(data$V8, "*0")
levels(data$V8)
data <- read.csv(inputfile, sep = ";", header = F)
levels(data$V8)
c(levels(data$V8), "*0")
levels(data$V8) <- c(levels(data$V8), "*0")
levels(data$V8)
which(data$V8 == "*")
data$V8[which(data$V8 == "*")] <- "*0"
data$V8
inputfile <- "C:/IA008/IA008_DOM-5-11-25.csv"
inputfile2 <- "C:/IA008/IA008_DOM-5-11-25-recalculated__novy_celkovy_pocet_bodu.csv"
outputfile <- "C:/IA008/IA008_DOM-5-11-25-corrected.csv"
## computation
data <- read.csv(inputfile, sep = ";", header = F)
levels(data$V8) <- c(levels(data$V8), "*0")  ## if there is missing record, there should be only "*", so replace it with "*0"
data$V8[which(data$V8 == "*")] <- "*0"
data2 <- read.csv(inputfile2, sep = ";", header = F)
data_merge <- merge(data, data2[, c("V1", "V8")], by = "V1", all.x = T)
max_x2 <- sapply(as.character(data_merge$V8.y),
function(x) max(as.numeric(strsplit(x, "*", fixed = TRUE)[[1]]), na.rm = T))
names(max_x2) <- NULL
x <- sapply(data_merge[, 8], substring, first = 2)
x <- as.numeric(x)
new_x <- pmax(x, max_x2)
new_x
data_merge <- data_merge[, -9]
data_merge[, 8] <- sapply(new_x, function(y) {
if (is.na(y)) {
return("")
} else {
return(paste0("*", round(y, 2)))
}
})
write.table(data_merge, outputfile, sep=":", dec=".", row.names=F, col.names=F, quote=c(2,5))
inputfile <- "C:/IA008/IA008_DOM-5-11-25-corrected.csv"
outputfile <- "C:/IA008/IA008_DOM-5-11-25-points.csv"
maxpoints <- 19.0
## computation
data <- read.csv(inputfile, sep = ";", header = F)
x <- sapply(data[, 8], substring, first = 2)
x <- as.numeric(x)
x <- x * 4.0 / maxpoints
data[, 8] <- sapply(x, function(y) {
if (is.na(y)) {
return("")
} else {
return(paste0("*", round(y, 2)))
}
})
write.table(data, outputfile, sep=":", dec=".", row.names=F, col.names=F, quote=c(2,5))
9 / 19 * 4
13 / 19 * 4
inputfile <- "C:/IA008/IA008_DOM-6-09-12.csv"
outputfile <- "C:/IA008/IA008_DOM-6-09-12-points.csv"
maxpoints <- 20.0
## computation
data <- read.csv(inputfile, sep = ";", header = F)
x <- sapply(data[, 8], substring, first = 2)
x <- as.numeric(x)
x <- x * 4.0 / maxpoints
data[, 8] <- sapply(x, function(y) {
if (is.na(y)) {
return("")
} else {
return(paste0("*", round(y, 2)))
}
})
write.table(data, outputfile, sep=":", dec=".", row.names=F, col.names=F, quote=c(2,5))
sample(24)
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
install.packages("dplyr")
library(dplyr)
dim(flights)
haed(flights)
head(flights)
library(plyr)
dim(flights)
library(dplyr)
library(nycflights13)
dim(flights)
filter(flights, month == 1, day == 1)
View(filter(flights, month == 1, day == 1))
class(flights)
View(filter(flights, month == 1, day == 1))
filter(flights, month == 1, day == 1)
filter(flights, month == 1 | month == 2)
slice(flights, 1:4)
slice(flights, 1:10)
arrange(flights, year, month, day)
View(arrange(flights, year, month, day))
arrange(flights, desc(arr_delay))
arrange(flights, arr_delay)
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
select(flights, tail_num = tailnum)
select(flights, -(year:day))
rename(flights, tail_num = tailnum)
select(flights, -(year:day))
select(flights, tailnum)
distinct(select(flights, tailnum))
distinct(select(flights, origin, dest))
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
filter(flights)
mutate(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60)
)
transform(flights,
gain = arr_delay - delay,
gain_per_hour = gain / (air_time / 60)
)
transmute(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60)
)
sample_n(flights, 10)
sample_frac(flights, 0.01).
sample_frac(flights, 0.01)
planes <- group_by(flights, tailnum)
planes
delay <- summarise(planes,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
?n
delay
View(delay)
delay <- filter(delay, count > 20, dist < 2000)
View(delay)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
install.packages("labeling")
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
first(delay)
first(delay$tailnum)
last(delay$tailnum)
last(1:10)
destinations <- group_by(flights, dest)
destinations
n_distinct(flights$dest)
summarise(destinations,
planes = n_distinct(tailnum),
flights = n()
)
View(summarise(destinations,
planes = n_distinct(tailnum),
flights = n()
))
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
(per_month <- summarise(per_day, flights = sum(flights)))
(per_year  <- summarise(per_month, flights = sum(flights)))
flights %>%
group_by(year, month, day) %>%
select(arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
summarise(mtcars, mean(mpg))
summarise_(mtcars, ~mean(mpg))
summarise_(mtcars, mean(mpg))
summarise_(mtcars, ~mean(mpg))
summarise_(mtcars, quote(mean(mpg)))
summarise_(mtcars, "mean(mpg)")
?interp
summarise(per_day, flights = sum(flights))
per_day
location(iris)
head(iris)
iris2 <- iris
location(iris2)
changes(iris2, iris)
iris2$Sepal.Length <- iris2$Sepal.Length * 2
changes(iris2, iris)
changes(iris, iris2)
iris3 <- mutate(iris, Sepal.Length = Sepal.Length * 2)
changes(iris3, iris)
library(Lahman)
install.packages("Lahman")
library(Lahman)
Batting
batting <- select(tbl_df(Batting), playerID, yearID, teamID, G, AB:H)
battings
batting
batting <- arrange(batting, playerID, yearID, teamID)
players <- group_by(batting, playerID)
batting
players
filter(players, min_rank(desc(H)) <= 2 & H > 0)
mutate(players, G_rank = min_rank(G))
a <- sample(10)
a
min_rank(a)
a <- sample(10) * 3
a
min_rank(a)
lag(a)
filter(players, G > lag(G))
mutate(players, G_change = (G - lag(G)) / (yearID - lag(yearID)))
mean(G)
mean(players$G)
filter(players, G > mean(G))
mutate(players, G_z = (G - mean(G)) / sd(G))
summarise(players, mean(G))
summarise(players, sd(G))
(11 - 37.25000) / 23.505319
x <- c(1, 1, 2, 2, 2)
row_number(x)
min_rank(x)
dense_rank(x)
a
min_rank(a)
dense_rank(a)
cume_dist(a)
cume_dist(x)
cume_dist(x*2)
x*2
percent_rank(x)
percent_rank(a)
a
percent_rank(1:2)
percent_rank(1:3)
percent_rank(1:4)
percent_rank(1:5)
cume_dist(1:2)
cume_dist(1:3)
cume_dist(1:4)
cume_dist(1:5)
filter(players, min_rank(desc(G)) < 2)
filter(players, min_rank(G) < 2)
filter(players, min_rank(desc(G)) <= 2)
filter(players, min_rank(G) <= 2)
View(players)
filter(players, cume_dist(desc(G)) < 0.1)
by_team_player <- group_by(batting, teamID, playerID)
by_team <- summarise(by_team_player, G = sum(G))
by_team
by_team_quartile <- group_by(by_team, quartile = ntile(G, 4))
by_team_quartile
summarise(by_team_quartile, mean(G))
x <- 1:5
lead(x)
x
lead(x)
lag(x)
mutate(players, G_delta = G - lag(G))
filter(players, teamID != lag(teamID))
df <- data.frame(year = 2000:2005, value = (0:5) ^ 2)
scrambled <- df[sample(nrow(df)), ]
scrambled
wrong <- mutate(scrambled, running = cumsum(value))
wrong
arrange(wrong, year)
right <- mutate(scrambled, running = order_by(year, cumsum(value)))
arrange(right, year)
700/40
700/50
sample(25)
132 * 2
264 / 52
sample(24)
7e-3 * 170000
7e-4 * 170000
23.68 * 294
install.packages("rpart")
28 * 52
74 + 17
91 / 2
install.packages("KernSmooth")
library(KernSmooth)
"a":"c"
df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"))
df
which(df[,1] < 2 | df[,1] > 3)
k <- which(df[,1] < 2 | df[,1] > 3)
df[k,2] <- "Q"
df[k,2] <- "e"
df
rep(c("c", "d"), c(4,1))
library(kernlab)
df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"))
k <- which(df[,1] < 2 | df[,1] > 3)
p <- rep(c("c", "d"), c(4,1))
df <- cbind(df, p)
df[k,3] <- "e"
df[k,3] <- "d"
df
df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"))
df
k <- which(df[,1] < 2 | df[,1] > 3)
k
p <- rep(c("c", "d"), c(4,1))
p
df <- cbind(df, p)
df
df[k,3] <- "d"
df
library(kernlab)
df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"))
df
k <- which(df[,1] < 2 | df[,1] > 3)
k
p <- rep(c("c", "d"), c(4,1))
p
df <- cbind(df, p)
df
df[k,3] <- "d"
df
2    df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"))
df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"))
df
3    k <- which(df[,1] < 2 | df[,1] > 3)
k <- which(df[,1] < 2 | df[,1] > 3)
k
4    p <- rep(c("c", "d"), c(4,1))
p <- rep(c("c", "d"), c(4,1))
p
df <- cbind(df, p)
df
6    df[k,3] <- "d"
df[k,3] <- "d"
df
setwd("~/DataScienceProjects/course02/ProgrammingAssignment2")
inv
inverse
x <- matrix()
x$getinverse()
x <- matrix(c(1:9), 3,3)
x
solve(x)
x <- matrix(c(1:9)+1, 3,3)
x
solve(x)
x <- matrix(c(1:9)*1.5, 3,3)
x
solve(x)
x <- matrix(rnorm(9), 3,3)
x
solve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
cacheSolve(x)
makeCacheMatrix(x)
special_matrix <- makeCacheMatrix(x)
special_matrix
special_matrix$get()
cacheSolve(special_matrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(special_matrix)
cacheSolve(special_matrix)
cacheSolve(special_matrix)
x %*% cacheSolve(special_matrix)
special_matrix
special_matrix$get()
